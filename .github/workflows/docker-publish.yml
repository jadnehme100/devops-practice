name: CI/CD - Build & Push Docker image

on:
  push:
    branches: [ "main" ]        # run on pushes to main
  workflow_dispatch:            # allow manual trigger from the Actions tab

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/devops-practice

jobs:
  test:
    name: Build (sanity) on Node
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Debug paths
        run: |
          pwd
          ls -la
          ls -la app
          test -f app/package-lock.json && echo "FOUND: app/package-lock.json" || (echo "MISSING: app/package-lock.json" && exit 1)


      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: Install deps
        working-directory: app
        run: npm ci

      - name: Typecheck / Build (fast sanity)
        working-directory: app
        run: |
          npm run build
        # If you have tests, add: npm test -- --ci

  docker:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: test                  # wait for the test job to succeed

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up QEMU (enables cross-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx (modern builder with caching)
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          platforms: linux/amd64         # add linux/arm64 if you need Apple Silicon in prod
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
